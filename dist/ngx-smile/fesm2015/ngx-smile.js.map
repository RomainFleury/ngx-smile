{"version":3,"file":"ngx-smile.js.map","sources":["ng://ngx-smile/lib/ngx-smile.service.ts","ng://ngx-smile/lib/ngx-smile.component.ts","ng://ngx-smile/lib/ngx-smile.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSmileService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-smile',\n  templateUrl: './ngx-smile.component.html',\n  styleUrls: ['./ngx-smile.component.sass']\n})\nexport class NgxSmileComponent implements OnInit {\n\n  @Input() threshold: number;\n  @Input() showDebug = false; // use this to display debug and test data\n  @Input() size = 150;\n  @Input() faceColor = '#fff';\n  @Input() borderColor = '#000000';\n  @Input() thickness = 4;\n  @Input() mouthVariation = 0;\n  @Input() blinkRepeatSpeed = 3000 + Math.round(Math.random() * 100);\n\n  head: SvgCircleData = { positionX: 0, positionY: 0, ray: 0, strokeColor: '', strokeWidth: 0, fillColor: '' };\n  leftEye: SvgCircleData = { positionX: 0, positionY: 0, ray: 0, strokeColor: '', strokeWidth: 0, fillColor: '' };\n  rightEye: SvgCircleData = { positionX: 0, positionY: 0, ray: 0, strokeColor: '', strokeWidth: 0, fillColor: '' };\n  mouth: SvgPathData = { d: '', strokeColor: '', strokeWidth: 0, fillColor: '' };\n  blinkTimings: { x: SvgAnimation, y: SvgAnimation } = { x: {}, y: {} };\n  maxMouthHeigth: number;\n  dimension: number;\n\n  debug: {\n    leftTop: { x: number, y: number, color: string },\n    leftLine: string,\n    leftBottom: { x: number, y: number, color: string },\n    rightBottom: { x: number, y: number, color: string },\n    rightLine: string,\n    rightTop: { x: number, y: number, color: string },\n  } | undefined = undefined;\n  showLines = false;\n\n  ngOnInit() {\n    this.thickness = Number(this.thickness);\n    this.size = Number(this.size);\n    this.mouthVariation = Number(this.mouthVariation);\n    this.blinkRepeatSpeed = Number(this.blinkRepeatSpeed);\n    this.maxMouthHeigth = this.size / 4;\n    this.setImageDimension();\n    this.drawFace();\n  }\n\n  drawFace() {\n    this.setImageDimension();\n    this.drawHead();\n    this.drawLeftEye();\n    this.drawRightEye();\n    this.drawSmile();\n    this.setupEyesAnimations();\n  }\n\n  setImageDimension() {\n    this.dimension = this.size + this.thickness * 2;\n  }\n\n  udpateSmileSlider(_: EventEmitter<any>) {\n    this.drawFace();\n  }\n\n  toggleLines() {\n    this.showLines = !this.showLines;\n  }\n\n  drawHead() {\n    this.head.positionX = this.head.positionY = this.size / 2 + this.thickness;\n    this.head.ray = this.size / 2;\n    this.head.strokeColor = this.borderColor;\n    this.head.strokeWidth = this.thickness;\n    this.head.fillColor = this.faceColor;\n  }\n\n  drawLeftEye() {\n    this.leftEye.positionX = this.leftEye.positionY = this.size / 3 + this.thickness;\n    this.leftEye.ray = this.size / 20;\n    this.leftEye.strokeColor = this.borderColor;\n    this.leftEye.strokeWidth = this.thickness;\n    this.leftEye.fillColor = this.borderColor;\n  }\n\n  drawRightEye() {\n    this.rightEye.positionX = this.size * 2 / 3 + this.thickness;\n    this.rightEye.positionY = this.size / 3 + this.thickness;\n    this.rightEye.ray = this.size / 20;\n    this.rightEye.strokeColor = this.borderColor;\n    this.rightEye.strokeWidth = this.thickness;\n    this.rightEye.fillColor = this.borderColor;\n  }\n\n  drawSmile() {\n    // this.mouth.d = 'M70 60 C 70 80, 130 80, 110 60';\n    // this.mouth.d = 'M70 110 C 70 140, 110 140, 110 110';\n    // this.mouth.d = 'M10 10 C 20 20, 40 20, 50 10';\\\n    // this.mouth.d = `M C ${this.size * 2 / 3} 140, ${this.size * 1 / 3} 140, ${this.size * 2 / 3} 110`;\n    // this.mouth.d = `M${this.size * 2 / 8} ${this.size * 2 / 3} C ${this.size * 2 / 8} ${this.size * 2 / 3}, ${\n    //   this.size * 6 / 8} ${this.size * 2 / 3}, ${this.size * 6 / 8} ${this.size * 2 / 3}`; // => this is a flat mouth\n\n    // const maxMouthHeigth = this.size / 6;\n    const maxThreshold = this.maxMouthHeigth / 2;\n\n    const basePositionLeftX = this.size * 2 / 8 + this.thickness;\n    const basePositionLeftY = this.size * 2 / 3 + this.thickness;\n\n    const leftTopPointCoords = {\n      x: basePositionLeftX - this.mouthVariation,\n      y: basePositionLeftY - (maxThreshold * this.threshold)\n    };\n    const leftBottomPointCoords = {\n      x: basePositionLeftX + this.mouthVariation,\n      y: basePositionLeftY + (maxThreshold * this.threshold)\n    };\n\n    const basePositionRightX = this.size * 6 / 8 + this.thickness;\n    const basePositionRightY = this.size * 2 / 3 + this.thickness;\n\n    const rightTopPointCoords = {\n      x: basePositionRightX + this.mouthVariation,\n      y: basePositionRightY - (maxThreshold * this.threshold)\n    };\n    const rightBottomPointCoords = {\n      x: basePositionRightX - this.mouthVariation,\n      y: basePositionRightY + (maxThreshold * this.threshold)\n    };\n\n    this.mouth.d = `M${leftTopPointCoords.x} ${leftTopPointCoords.y} C ${leftBottomPointCoords.x} ${leftBottomPointCoords.y}, ${\n      rightBottomPointCoords.x} ${rightBottomPointCoords.y}, ${rightTopPointCoords.x} ${rightTopPointCoords.y}`;\n\n    this.debug = {\n      leftTop: {\n        ...leftTopPointCoords,\n        color: '#f55',\n      },\n      leftBottom: {\n        ...leftBottomPointCoords,\n        color: '#5f5',\n      },\n      leftLine: `M${leftTopPointCoords.x} ${leftTopPointCoords.y}, ${leftBottomPointCoords.x} ${leftBottomPointCoords.y}`,\n      rightBottom: {\n        ...rightBottomPointCoords,\n        color: '#f55',\n      },\n      rightTop: {\n        ...rightTopPointCoords,\n        color: '#5f5',\n      },\n      rightLine: `M${rightBottomPointCoords.x} ${rightBottomPointCoords.y}, ${rightTopPointCoords.x} ${rightTopPointCoords.y}`,\n    };\n\n\n    this.mouth.strokeColor = this.borderColor;\n    this.mouth.fillColor = 'transparent';\n    this.mouth.strokeWidth = this.thickness;\n  }\n\n  setupEyesAnimations() {\n    const defaultWidth = this.size / 20;\n    const animationDuration = Number(this.blinkRepeatSpeed); // ms\n    const blinkDuration = 150; // ms\n    const repeatCount = this.showDebug ? 'indefinite' : '10';\n\n    const keyTimeBlinkStart = (animationDuration - blinkDuration) / animationDuration; // 0.95 for 3000ms\n    const blinkDurationPrct = (blinkDuration) / animationDuration;\n    const keyTimesPrct = `${\n      keyTimeBlinkStart + blinkDurationPrct * 0.1}; ${\n      keyTimeBlinkStart + blinkDurationPrct * 0.2}`; // 0.955; 0.96 for 3000ms\n\n\n    this.blinkTimings.y = {\n      attributeName: 'ry',\n      fill: 'remove',\n      dur: `${animationDuration}ms`,\n      repeatCount,\n      values: `${defaultWidth}; ${defaultWidth}; ${defaultWidth * 1.25}; 0; ${defaultWidth}`,\n      keyTimes: `0; ${keyTimeBlinkStart}; ${keyTimesPrct}; 1` // \"0; 0.95; 0.955; 0.96; 1\" for 3000ms\n    };\n\n    this.blinkTimings.x = {\n      attributeName: 'rx',\n      fill: 'remove',\n      dur: `${animationDuration}ms`,\n      repeatCount,\n      values: `${defaultWidth}; ${defaultWidth}; ${defaultWidth * 1.25}; ${defaultWidth}`,\n      keyTimes: `0; ${keyTimesPrct}; 1` // \"0; 0.955; 0.96; 1\" for 3000ms\n    };\n  }\n}\n\ninterface SvgCircleData {\n  positionX: number;\n  positionY: number;\n  ray: number;\n  strokeColor: string;\n  strokeWidth: number;\n  fillColor: string;\n}\n\ninterface SvgPathData {\n  d: string;\n  strokeColor: string;\n  strokeWidth: number;\n  fillColor: string;\n}\n\ninterface SvgAnimation {\n  values?: string;\n  keyTimes?: string;\n  repeatCount?: string;\n  dur?: string;\n  attributeName?: string;\n  fill?: string;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgxSmileComponent } from './ngx-smile.component';\n\n@NgModule({\n  declarations: [NgxSmileComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxSmileComponent]\n})\nexport class NgxSmileModule { }\n"],"names":[],"mappings":"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"}
