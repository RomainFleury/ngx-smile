!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/forms"),require("@angular/core")):"function"==typeof define&&define.amd?define("ngx-smile",["exports","@angular/common","@angular/forms","@angular/core"],e):e(t["ngx-smile"]={},t.ng.common,t.ng.forms,t.ng.core)}(this,function(t,e,i,n){"use strict";var o=function(){function t(){}return t.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=n.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),h=function(){return(h=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},r=function(){function t(){this.showDebug=!1,this.size=150,this.faceColor="#fff",this.borderColor="#000000",this.thickness=4,this.mouthVariation=0,this.blinkRepeatSpeed=3e3+Math.round(100*Math.random()),this.head={positionX:0,positionY:0,ray:0,strokeColor:"",strokeWidth:0,fillColor:""},this.leftEye={positionX:0,positionY:0,ray:0,strokeColor:"",strokeWidth:0,fillColor:""},this.rightEye={positionX:0,positionY:0,ray:0,strokeColor:"",strokeWidth:0,fillColor:""},this.mouth={d:"",strokeColor:"",strokeWidth:0,fillColor:""},this.blinkTimings={x:{},y:{}},this.debug=undefined,this.showLines=!1}return t.prototype.ngOnInit=function(){this.thickness=Number(this.thickness),this.size=Number(this.size),this.mouthVariation=Number(this.mouthVariation),this.blinkRepeatSpeed=Number(this.blinkRepeatSpeed),this.maxMouthHeigth=this.size/4,this.setImageDimension(),this.drawFace()},t.prototype.drawFace=function(){this.setImageDimension(),this.drawHead(),this.drawLeftEye(),this.drawRightEye(),this.drawSmile(),this.setupEyesAnimations()},t.prototype.setImageDimension=function(){this.dimension=this.size+2*this.thickness},t.prototype.udpateSmileSlider=function(t){this.drawFace()},t.prototype.toggleLines=function(){this.showLines=!this.showLines},t.prototype.drawHead=function(){this.head.positionX=this.head.positionY=this.size/2+this.thickness,this.head.ray=this.size/2,this.head.strokeColor=this.borderColor,this.head.strokeWidth=this.thickness,this.head.fillColor=this.faceColor},t.prototype.drawLeftEye=function(){this.leftEye.positionX=this.leftEye.positionY=this.size/3+this.thickness,this.leftEye.ray=this.size/20,this.leftEye.strokeColor=this.borderColor,this.leftEye.strokeWidth=this.thickness,this.leftEye.fillColor=this.borderColor},t.prototype.drawRightEye=function(){this.rightEye.positionX=2*this.size/3+this.thickness,this.rightEye.positionY=this.size/3+this.thickness,this.rightEye.ray=this.size/20,this.rightEye.strokeColor=this.borderColor,this.rightEye.strokeWidth=this.thickness,this.rightEye.fillColor=this.borderColor},t.prototype.drawSmile=function(){var t=this.maxMouthHeigth/2,e=2*this.size/8+this.thickness,i=2*this.size/3+this.thickness,n={x:e-this.mouthVariation,y:i-t*this.threshold},o={x:e+this.mouthVariation,y:i+t*this.threshold},r=6*this.size/8+this.thickness,s=2*this.size/3+this.thickness,a={x:r+this.mouthVariation,y:s-t*this.threshold},l={x:r-this.mouthVariation,y:s+t*this.threshold};this.mouth.d="M"+n.x+" "+n.y+" C "+o.x+" "+o.y+", "+l.x+" "+l.y+", "+a.x+" "+a.y,this.debug={leftTop:h({},n,{color:"#f55"}),leftBottom:h({},o,{color:"#5f5"}),leftLine:"M"+n.x+" "+n.y+", "+o.x+" "+o.y,rightBottom:h({},l,{color:"#f55"}),rightTop:h({},a,{color:"#5f5"}),rightLine:"M"+l.x+" "+l.y+", "+a.x+" "+a.y},this.mouth.strokeColor=this.borderColor,this.mouth.fillColor="transparent",this.mouth.strokeWidth=this.thickness},t.prototype.setupEyesAnimations=function(){var t=this.size/20,e=Number(this.blinkRepeatSpeed),i=this.showDebug?"indefinite":"10",n=(e-150)/e,o=150/e,r=n+.1*o+"; "+(n+.2*o);this.blinkTimings.y={attributeName:"ry",fill:"remove",dur:e+"ms",repeatCount:i,values:t+"; "+t+"; "+1.25*t+"; 0; "+t,keyTimes:"0; "+n+"; "+r+"; 1"},this.blinkTimings.x={attributeName:"rx",fill:"remove",dur:e+"ms",repeatCount:i,values:t+"; "+t+"; "+1.25*t+"; "+t,keyTimes:"0; "+r+"; 1"}},t.decorators=[{type:n.Component,args:[{selector:"ngx-smile",template:'<div class="all-container">\n  <div class="smile-container">\n    <svg [attr.width]="dimension" [attr.height]="dimension" class="smile" shape-rendering="geometricPrecision">\n      <circle [attr.cx]="head.positionX" [attr.cy]="head.positionY" [attr.r]="head.ray" [attr.stroke]="head.strokeColor"\n        [attr.stroke-width]="head.strokeWidth" [attr.fill]="head.fillColor" />\n      <g class="eye" id="leftEye">\n        <ellipse [attr.cx]="leftEye.positionX" [attr.cy]="leftEye.positionY" [attr.rx]="leftEye.ray" [attr.ry]="leftEye.ray"\n          [attr.stroke]="head.strokeColor" [attr.stroke-width]="leftEye.strokeWidth" [attr.fill]="leftEye.fillColor">\n          <animate [attr.attributeName]="blinkTimings.y.attributeName" [attr.fill]="blinkTimings.y.fill" [attr.dur]="blinkTimings.y.dur"\n            [attr.repeatCount]="blinkTimings.y.repeatCount" [attr.values]="blinkTimings.y.values" [attr.keyTimes]="blinkTimings.y.keyTimes" />\n          <animate [attr.attributeName]="blinkTimings.x.attributeName" [attr.fill]="blinkTimings.x.fill" [attr.dur]="blinkTimings.x.dur"\n            [attr.repeatCount]="blinkTimings.x.repeatCount" [attr.values]="blinkTimings.x.values" [attr.keyTimes]="blinkTimings.x.keyTimes" />\n        </ellipse>\n      </g>\n      <g class="eye" id="rightEye">\n        <ellipse [attr.cx]="rightEye.positionX" [attr.cy]="rightEye.positionY" [attr.rx]="rightEye.ray" [attr.ry]="rightEye.ray"\n          [attr.stroke]="rightEye.strokeColor" [attr.stroke-width]="rightEye.strokeWidth" [attr.fill]="rightEye.fillColor">\n          <animate [attr.attributeName]="blinkTimings.y.attributeName" [attr.fill]="blinkTimings.y.fill" [attr.dur]="blinkTimings.y.dur"\n            [attr.repeatCount]="blinkTimings.y.repeatCount" [attr.values]="blinkTimings.y.values" [attr.keyTimes]="blinkTimings.y.keyTimes" />\n          <animate [attr.attributeName]="blinkTimings.x.attributeName" [attr.fill]="blinkTimings.x.fill" [attr.dur]="blinkTimings.x.dur"\n            [attr.repeatCount]="blinkTimings.x.repeatCount" [attr.values]="blinkTimings.x.values" [attr.keyTimes]="blinkTimings.x.keyTimes" />\n        </ellipse>\n      </g>\n\n      \x3c!-- legit mouth --\x3e\n      <path [attr.d]="mouth.d" [attr.stroke]="mouth.strokeColor"\n        [attr.stroke-width]="mouth.strokeWidth" [attr.fill]="mouth.fillColor" />\n\n      \x3c!-- Debug to show how we drow the mouth --\x3e\n      <g *ngIf="showDebug && showLines">\n        <circle [attr.cx]="debug.leftTop.x" [attr.cy]="debug.leftTop.y" r="2" [attr.fill]="debug.leftTop.color" />\n        <path [attr.d]="debug.leftLine" stroke-width="2" stroke="#55f" />\n        <circle [attr.cx]="debug.leftBottom.x" [attr.cy]="debug.leftBottom.y" r="2" [attr.fill]="debug.leftBottom.color" />\n        <path [attr.d]="debug.rightLine" stroke-width="2" stroke="#55f" />\n        <circle [attr.cx]="debug.rightBottom.x" [attr.cy]="debug.rightBottom.y" r="2" [attr.fill]="debug.rightBottom.color" />\n        <circle [attr.cx]="debug.rightTop.x" [attr.cy]="debug.rightTop.y" r="2" [attr.fill]="debug.rightTop.color" />\n      </g>\n    </svg>\n  </div>\n  <div class="controls" *ngIf="showDebug">\n    <h2>Hapiness lvl : {{ threshold }}</h2>\n    <div class="debug-info">\n      <label for="showLines">Show smile drawing lines</label>\n      <input type="checkbox" name="showLines" [(ngModel)]="showLines" />\n      \x3c!-- <mat-slide-toggle [(ngModel)]="showLines">Show smile drawing lines</mat-slide-toggle> --\x3e\n    </div>\n    <div class="debug-info">\n      <label for="threshold">Happiness ({{ threshold }})</label>\n      <input name="threshold" type="number" min="-1" max="1" [(ngModel)]="threshold" (change)="udpateSmileSlider($event)"/>\n      \x3c!-- <mat-slider min="-1" max="1" step="0.01" [(ngModel)]="threshold" (change)="udpateSmileSlider($event)"></mat-slider> --\x3e\n    </div>\n    <div class="debug-info">\n      <label for="mouthVariation">Variation ({{mouthVariation}}) :</label>\n      <input name="mouthVariation" type="number" min="-20" max="20" [(ngModel)]="mouthVariation" (change)="udpateSmileSlider($event)"/>\n      \x3c!-- <mat-slider min="-20" max="20" step="1" [(ngModel)]="mouthVariation" (change)="udpateSmileSlider($event)"></mat-slider> --\x3e\n    </div>\n    <div class="debug-info">\n      <label for="maxMouthHeigth">Max Mouth Height {{maxMouthHeigth}} :</label>\n      <input name="maxMouthHeigth" type="number" min="-20" max="20" [(ngModel)]="maxMouthHeigth" (change)="udpateSmileSlider($event)"/>\n      \x3c!-- <mat-slider min="0" max="150" step="1" [(ngModel)]="maxMouthHeigth" (change)="udpateSmileSlider($event)"></mat-slider> --\x3e\n    </div>\n    <div class="debug-info">\n      <label for="blinkRepeatSpeed">Blink Speed {{blinkRepeatSpeed | number}} :</label>\n      <input name="blinkRepeatSpeed" type="number" min="200" max="5000" [(ngModel)]="blinkRepeatSpeed" (change)="udpateSmileSlider($event)"/>\n      \x3c!-- <mat-slider min="200" max="5000" step="100" [(ngModel)]="blinkRepeatSpeed" (change)="udpateSmileSlider($event)"></mat-slider> --\x3e\n    </div>\n    <div class="debug-info">\n      <label for="thickness">Thickness {{thickness}} :</label>\n      <input name="thickness" type="number" min="1" max="15" [(ngModel)]="thickness" (change)="udpateSmileSlider($event)"/>\n      \x3c!-- <mat-slider min="1" max="15" step="1" [(ngModel)]="thickness" (change)="udpateSmileSlider($event)"></mat-slider> --\x3e\n    </div>\n  </div>\n</div>\n',styles:[".all-container{display:inline-block;text-align:center}.all-container h2{text-align:center}.all-container .smile-container{margin:1rem}.all-container .controls{margin:auto;width:100%;text-align:center}.all-container .controls .debug-info label{padding-right:.5rem}"]}]}],t.propDecorators={threshold:[{type:n.Input}],showDebug:[{type:n.Input}],size:[{type:n.Input}],faceColor:[{type:n.Input}],borderColor:[{type:n.Input}],thickness:[{type:n.Input}],mouthVariation:[{type:n.Input}],blinkRepeatSpeed:[{type:n.Input}]},t}(),s=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{declarations:[r],imports:[e.CommonModule,i.FormsModule],exports:[r]}]}],t}();t.NgxSmileService=o,t.NgxSmileComponent=r,t.NgxSmileModule=s,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-smile.umd.min.js.map