{"version":3,"sources":["webpack:///./dist/ngx-smile/fesm5/ngx-smile.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.sass","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACc;AACF;AAC4C;;AAEzF;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA,kDAAkD,WAAW;AAC7D,yDAAyD,sEAAgB,EAAE,8CAA8C,8BAA8B,EAAE,8CAA8C;AACvM;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,wBAAwB;AACxB,yBAAyB;AACzB,sBAAsB;AACtB,6BAA6B,MAAM,OAAO;AAC1C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yDAAyD;AACzD,iCAAiC,kBAAkB,QAAQ,kBAAkB,QAAQ,kBAAkB;AACvG,8BAA8B,kBAAkB,GAAG,kBAAkB,KAAK,kBAAkB,GAAG,kBAAkB;AACjH,+BAA+B,GAAG,kBAAkB,IAAI,kBAAkB,GAAG,kBAAkB,EAAE;AACjG;AACA;AACA,yDAAyD;AACzD,iCAAiC,kBAAkB,QAAQ,kBAAkB,QAAQ,kBAAkB;AACvG,8BAA8B,kBAAkB,GAAG,kBAAkB,KAAK,kBAAkB,GAAG,kBAAkB;AACjH,+BAA+B,GAAG,kBAAkB,IAAI,kBAAkB,GAAG,kBAAkB,EAAE;AACjG;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAQ,GAAG,uBAAuB,gBAAgB;AACvE,wBAAwB,sDAAQ,GAAG,0BAA0B,gBAAgB;AAC7E;AACA,yBAAyB,sDAAQ,GAAG,2BAA2B,gBAAgB;AAC/E,sBAAsB,sDAAQ,GAAG,wBAAwB,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB,6BAA6B,GAAG;AAC3F,yBAAyB,2BAA2B,sBAAsB,UAAU,MAAM,OAAO,MAAM;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB,6BAA6B;AACxF,yBAAyB,sBAAsB,UAAU,OAAO,MAAM;AACtE;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2xGAA2xG,aAAa,wXAAwX,aAAa,+XAA+X,gBAAgB,uZAAuZ,gBAAgB,kZAAkZ,2BAA2B,sZAAsZ,WAAW;AACjzK,6CAA6C,qBAAqB,kBAAkB,kBAAkB,kBAAkB,gCAAgC,YAAY,yBAAyB,YAAY,WAAW,kBAAkB,2CAA2C,oBAAoB;AACrS,iBAAiB;AACjB;AACA;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,0DAAW;AACnC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE8D;;AAE9D,qC;;;;;;;;;;;AC3SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,wIAAwI,SAAS,i6C;;;;;;;;;;;ACAjJ,kCAAkC,uBAAuB,EAAE,+CAA+C,uU;;;;;;;;;;;;;;;;;ACAhE;AAO1C;IALA;QAME,UAAK,GAAG,UAAU,CAAC;IACrB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;ACPkB;AAC3C,sEAAsE;AAEvB;AACN;AAC0B;AACT;AACkB;AAE7B;AAiB/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAfrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,4DAAY;gBACZ,iEAAe;gBACf,+DAAa;gBACb,wDAAc;gBACd,yFAAoB;aACrB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AC1BtB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["import { __assign } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Injectable, defineInjectable, NgModule, Component, Input } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxSmileService = /** @class */ (function () {\n    function NgxSmileService() {\n    }\n    NgxSmileService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] }\n    ];\n    /** @nocollapse */\n    NgxSmileService.ctorParameters = function () { return []; };\n    /** @nocollapse */ NgxSmileService.ngInjectableDef = defineInjectable({ factory: function NgxSmileService_Factory() { return new NgxSmileService(); }, token: NgxSmileService, providedIn: \"root\" });\n    return NgxSmileService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxSmileComponent = /** @class */ (function () {\n    function NgxSmileComponent() {\n        this.showDebug = false; // use this to display debug and test data\n        // use this to display debug and test data\n        this.size = 150;\n        this.faceColor = '#fff';\n        this.borderColor = '#000000';\n        this.thickness = 4;\n        this.mouthVariation = 0;\n        this.blinkRepeatSpeed = 3000 + Math.round(Math.random() * 100);\n        this.head = { positionX: 0, positionY: 0, ray: 0, strokeColor: '', strokeWidth: 0, fillColor: '' };\n        this.leftEye = { positionX: 0, positionY: 0, ray: 0, strokeColor: '', strokeWidth: 0, fillColor: '' };\n        this.rightEye = { positionX: 0, positionY: 0, ray: 0, strokeColor: '', strokeWidth: 0, fillColor: '' };\n        this.mouth = { d: '', strokeColor: '', strokeWidth: 0, fillColor: '' };\n        this.blinkTimings = { x: {}, y: {} };\n        this.debug = undefined;\n        this.showLines = false;\n    }\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.thickness = Number(this.thickness);\n        this.size = Number(this.size);\n        this.mouthVariation = Number(this.mouthVariation);\n        this.blinkRepeatSpeed = Number(this.blinkRepeatSpeed);\n        this.maxMouthHeigth = this.size / 4;\n        this.setImageDimension();\n        this.drawFace();\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.drawFace = /**\n     * @return {?}\n     */\n    function () {\n        this.setImageDimension();\n        this.drawHead();\n        this.drawLeftEye();\n        this.drawRightEye();\n        this.drawSmile();\n        this.setupEyesAnimations();\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.setImageDimension = /**\n     * @return {?}\n     */\n    function () {\n        this.dimension = this.size + this.thickness * 2;\n    };\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.udpateSmileSlider = /**\n     * @param {?} _\n     * @return {?}\n     */\n    function (_) {\n        this.drawFace();\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.toggleLines = /**\n     * @return {?}\n     */\n    function () {\n        this.showLines = !this.showLines;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.drawHead = /**\n     * @return {?}\n     */\n    function () {\n        this.head.positionX = this.head.positionY = this.size / 2 + this.thickness;\n        this.head.ray = this.size / 2;\n        this.head.strokeColor = this.borderColor;\n        this.head.strokeWidth = this.thickness;\n        this.head.fillColor = this.faceColor;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.drawLeftEye = /**\n     * @return {?}\n     */\n    function () {\n        this.leftEye.positionX = this.leftEye.positionY = this.size / 3 + this.thickness;\n        this.leftEye.ray = this.size / 20;\n        this.leftEye.strokeColor = this.borderColor;\n        this.leftEye.strokeWidth = this.thickness;\n        this.leftEye.fillColor = this.borderColor;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.drawRightEye = /**\n     * @return {?}\n     */\n    function () {\n        this.rightEye.positionX = this.size * 2 / 3 + this.thickness;\n        this.rightEye.positionY = this.size / 3 + this.thickness;\n        this.rightEye.ray = this.size / 20;\n        this.rightEye.strokeColor = this.borderColor;\n        this.rightEye.strokeWidth = this.thickness;\n        this.rightEye.fillColor = this.borderColor;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.drawSmile = /**\n     * @return {?}\n     */\n    function () {\n        // this.mouth.d = 'M70 60 C 70 80, 130 80, 110 60';\n        // this.mouth.d = 'M70 110 C 70 140, 110 140, 110 110';\n        // this.mouth.d = 'M10 10 C 20 20, 40 20, 50 10';\\\n        // this.mouth.d = `M C ${this.size * 2 / 3} 140, ${this.size * 1 / 3} 140, ${this.size * 2 / 3} 110`;\n        // this.mouth.d = `M${this.size * 2 / 8} ${this.size * 2 / 3} C ${this.size * 2 / 8} ${this.size * 2 / 3}, ${\n        //   this.size * 6 / 8} ${this.size * 2 / 3}, ${this.size * 6 / 8} ${this.size * 2 / 3}`; // => this is a flat mouth\n        // this.mouth.d = 'M70 60 C 70 80, 130 80, 110 60';\n        // this.mouth.d = 'M70 110 C 70 140, 110 140, 110 110';\n        // this.mouth.d = 'M10 10 C 20 20, 40 20, 50 10';\\\n        // this.mouth.d = `M C ${this.size * 2 / 3} 140, ${this.size * 1 / 3} 140, ${this.size * 2 / 3} 110`;\n        // this.mouth.d = `M${this.size * 2 / 8} ${this.size * 2 / 3} C ${this.size * 2 / 8} ${this.size * 2 / 3}, ${\n        //   this.size * 6 / 8} ${this.size * 2 / 3}, ${this.size * 6 / 8} ${this.size * 2 / 3}`; // => this is a flat mouth\n        // const maxMouthHeigth = this.size / 6;\n        /** @type {?} */\n        var maxThreshold = this.maxMouthHeigth / 2;\n        /** @type {?} */\n        var basePositionLeftX = this.size * 2 / 8 + this.thickness;\n        /** @type {?} */\n        var basePositionLeftY = this.size * 2 / 3 + this.thickness;\n        /** @type {?} */\n        var leftTopPointCoords = {\n            x: basePositionLeftX - this.mouthVariation,\n            y: basePositionLeftY - (maxThreshold * this.threshold)\n        };\n        /** @type {?} */\n        var leftBottomPointCoords = {\n            x: basePositionLeftX + this.mouthVariation,\n            y: basePositionLeftY + (maxThreshold * this.threshold)\n        };\n        /** @type {?} */\n        var basePositionRightX = this.size * 6 / 8 + this.thickness;\n        /** @type {?} */\n        var basePositionRightY = this.size * 2 / 3 + this.thickness;\n        /** @type {?} */\n        var rightTopPointCoords = {\n            x: basePositionRightX + this.mouthVariation,\n            y: basePositionRightY - (maxThreshold * this.threshold)\n        };\n        /** @type {?} */\n        var rightBottomPointCoords = {\n            x: basePositionRightX - this.mouthVariation,\n            y: basePositionRightY + (maxThreshold * this.threshold)\n        };\n        this.mouth.d = \"M\" + leftTopPointCoords.x + \" \" + leftTopPointCoords.y + \" C \" + leftBottomPointCoords.x + \" \" + leftBottomPointCoords.y + \", \" + rightBottomPointCoords.x + \" \" + rightBottomPointCoords.y + \", \" + rightTopPointCoords.x + \" \" + rightTopPointCoords.y;\n        this.debug = {\n            leftTop: __assign({}, leftTopPointCoords, { color: '#f55' }),\n            leftBottom: __assign({}, leftBottomPointCoords, { color: '#5f5' }),\n            leftLine: \"M\" + leftTopPointCoords.x + \" \" + leftTopPointCoords.y + \", \" + leftBottomPointCoords.x + \" \" + leftBottomPointCoords.y,\n            rightBottom: __assign({}, rightBottomPointCoords, { color: '#f55' }),\n            rightTop: __assign({}, rightTopPointCoords, { color: '#5f5' }),\n            rightLine: \"M\" + rightBottomPointCoords.x + \" \" + rightBottomPointCoords.y + \", \" + rightTopPointCoords.x + \" \" + rightTopPointCoords.y,\n        };\n        this.mouth.strokeColor = this.borderColor;\n        this.mouth.fillColor = 'transparent';\n        this.mouth.strokeWidth = this.thickness;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmileComponent.prototype.setupEyesAnimations = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var defaultWidth = this.size / 20;\n        /** @type {?} */\n        var animationDuration = Number(this.blinkRepeatSpeed);\n        // ms\n        /** @type {?} */\n        var blinkDuration = 150;\n        // ms\n        /** @type {?} */\n        var repeatCount = this.showDebug ? 'indefinite' : '10';\n        /** @type {?} */\n        var keyTimeBlinkStart = (animationDuration - blinkDuration) / animationDuration;\n        // 0.95 for 3000ms\n        /** @type {?} */\n        var blinkDurationPrct = (blinkDuration) / animationDuration;\n        /** @type {?} */\n        var keyTimesPrct = keyTimeBlinkStart + blinkDurationPrct * 0.1 + \"; \" + (keyTimeBlinkStart + blinkDurationPrct * 0.2);\n        this.blinkTimings.y = {\n            attributeName: 'ry',\n            fill: 'remove',\n            dur: animationDuration + \"ms\",\n            repeatCount: repeatCount,\n            values: defaultWidth + \"; \" + defaultWidth + \"; \" + defaultWidth * 1.25 + \"; 0; \" + defaultWidth,\n            keyTimes: \"0; \" + keyTimeBlinkStart + \"; \" + keyTimesPrct + \"; 1\" // \"0; 0.95; 0.955; 0.96; 1\" for 3000ms\n        };\n        this.blinkTimings.x = {\n            attributeName: 'rx',\n            fill: 'remove',\n            dur: animationDuration + \"ms\",\n            repeatCount: repeatCount,\n            values: defaultWidth + \"; \" + defaultWidth + \"; \" + defaultWidth * 1.25 + \"; \" + defaultWidth,\n            keyTimes: \"0; \" + keyTimesPrct + \"; 1\" // \"0; 0.955; 0.96; 1\" for 3000ms\n        };\n    };\n    NgxSmileComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngx-smile',\n                    template: \"<div class=\\\"all-container\\\">\\n  <div class=\\\"smile-container\\\">\\n    <svg [attr.width]=\\\"dimension\\\" [attr.height]=\\\"dimension\\\" class=\\\"smile\\\" shape-rendering=\\\"geometricPrecision\\\">\\n      <circle [attr.cx]=\\\"head.positionX\\\" [attr.cy]=\\\"head.positionY\\\" [attr.r]=\\\"head.ray\\\" [attr.stroke]=\\\"head.strokeColor\\\"\\n        [attr.stroke-width]=\\\"head.strokeWidth\\\" [attr.fill]=\\\"head.fillColor\\\" />\\n      <g class=\\\"eye\\\" id=\\\"leftEye\\\">\\n        <ellipse [attr.cx]=\\\"leftEye.positionX\\\" [attr.cy]=\\\"leftEye.positionY\\\" [attr.rx]=\\\"leftEye.ray\\\" [attr.ry]=\\\"leftEye.ray\\\"\\n          [attr.stroke]=\\\"head.strokeColor\\\" [attr.stroke-width]=\\\"leftEye.strokeWidth\\\" [attr.fill]=\\\"leftEye.fillColor\\\">\\n          <animate [attr.attributeName]=\\\"blinkTimings.y.attributeName\\\" [attr.fill]=\\\"blinkTimings.y.fill\\\" [attr.dur]=\\\"blinkTimings.y.dur\\\"\\n            [attr.repeatCount]=\\\"blinkTimings.y.repeatCount\\\" [attr.values]=\\\"blinkTimings.y.values\\\" [attr.keyTimes]=\\\"blinkTimings.y.keyTimes\\\" />\\n          <animate [attr.attributeName]=\\\"blinkTimings.x.attributeName\\\" [attr.fill]=\\\"blinkTimings.x.fill\\\" [attr.dur]=\\\"blinkTimings.x.dur\\\"\\n            [attr.repeatCount]=\\\"blinkTimings.x.repeatCount\\\" [attr.values]=\\\"blinkTimings.x.values\\\" [attr.keyTimes]=\\\"blinkTimings.x.keyTimes\\\" />\\n        </ellipse>\\n      </g>\\n      <g class=\\\"eye\\\" id=\\\"rightEye\\\">\\n        <ellipse [attr.cx]=\\\"rightEye.positionX\\\" [attr.cy]=\\\"rightEye.positionY\\\" [attr.rx]=\\\"rightEye.ray\\\" [attr.ry]=\\\"rightEye.ray\\\"\\n          [attr.stroke]=\\\"rightEye.strokeColor\\\" [attr.stroke-width]=\\\"rightEye.strokeWidth\\\" [attr.fill]=\\\"rightEye.fillColor\\\">\\n          <animate [attr.attributeName]=\\\"blinkTimings.y.attributeName\\\" [attr.fill]=\\\"blinkTimings.y.fill\\\" [attr.dur]=\\\"blinkTimings.y.dur\\\"\\n            [attr.repeatCount]=\\\"blinkTimings.y.repeatCount\\\" [attr.values]=\\\"blinkTimings.y.values\\\" [attr.keyTimes]=\\\"blinkTimings.y.keyTimes\\\" />\\n          <animate [attr.attributeName]=\\\"blinkTimings.x.attributeName\\\" [attr.fill]=\\\"blinkTimings.x.fill\\\" [attr.dur]=\\\"blinkTimings.x.dur\\\"\\n            [attr.repeatCount]=\\\"blinkTimings.x.repeatCount\\\" [attr.values]=\\\"blinkTimings.x.values\\\" [attr.keyTimes]=\\\"blinkTimings.x.keyTimes\\\" />\\n        </ellipse>\\n      </g>\\n\\n      <!-- legit mouth -->\\n      <path [attr.d]=\\\"mouth.d\\\" [attr.stroke]=\\\"mouth.strokeColor\\\"\\n        [attr.stroke-width]=\\\"mouth.strokeWidth\\\" [attr.fill]=\\\"mouth.fillColor\\\" />\\n\\n      <!-- Debug to show how we drow the mouth -->\\n      <g *ngIf=\\\"showDebug && showLines\\\">\\n        <circle [attr.cx]=\\\"debug.leftTop.x\\\" [attr.cy]=\\\"debug.leftTop.y\\\" r=\\\"2\\\" [attr.fill]=\\\"debug.leftTop.color\\\" />\\n        <path [attr.d]=\\\"debug.leftLine\\\" stroke-width=\\\"2\\\" stroke=\\\"#55f\\\" />\\n        <circle [attr.cx]=\\\"debug.leftBottom.x\\\" [attr.cy]=\\\"debug.leftBottom.y\\\" r=\\\"2\\\" [attr.fill]=\\\"debug.leftBottom.color\\\" />\\n        <path [attr.d]=\\\"debug.rightLine\\\" stroke-width=\\\"2\\\" stroke=\\\"#55f\\\" />\\n        <circle [attr.cx]=\\\"debug.rightBottom.x\\\" [attr.cy]=\\\"debug.rightBottom.y\\\" r=\\\"2\\\" [attr.fill]=\\\"debug.rightBottom.color\\\" />\\n        <circle [attr.cx]=\\\"debug.rightTop.x\\\" [attr.cy]=\\\"debug.rightTop.y\\\" r=\\\"2\\\" [attr.fill]=\\\"debug.rightTop.color\\\" />\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"controls\\\" *ngIf=\\\"showDebug\\\">\\n    <h2>Hapiness lvl : {{ threshold }}</h2>\\n    <div class=\\\"debug-info\\\">\\n      <label for=\\\"showLines\\\">Show smile drawing lines</label>\\n      <input type=\\\"checkbox\\\" name=\\\"showLines\\\" [(ngModel)]=\\\"showLines\\\" />\\n      <!-- <mat-slide-toggle [(ngModel)]=\\\"showLines\\\">Show smile drawing lines</mat-slide-toggle> -->\\n    </div>\\n    <div class=\\\"debug-info\\\">\\n      <label for=\\\"threshold\\\">Happiness ({{ threshold }})</label>\\n      <input name=\\\"threshold\\\" type=\\\"number\\\" min=\\\"-1\\\" max=\\\"1\\\" [(ngModel)]=\\\"threshold\\\" (change)=\\\"udpateSmileSlider($event)\\\"/>\\n      <!-- <mat-slider min=\\\"-1\\\" max=\\\"1\\\" step=\\\"0.01\\\" [(ngModel)]=\\\"threshold\\\" (change)=\\\"udpateSmileSlider($event)\\\"></mat-slider> -->\\n    </div>\\n    <div class=\\\"debug-info\\\">\\n      <label for=\\\"mouthVariation\\\">Variation ({{mouthVariation}}) :</label>\\n      <input name=\\\"mouthVariation\\\" type=\\\"number\\\" min=\\\"-20\\\" max=\\\"20\\\" [(ngModel)]=\\\"mouthVariation\\\" (change)=\\\"udpateSmileSlider($event)\\\"/>\\n      <!-- <mat-slider min=\\\"-20\\\" max=\\\"20\\\" step=\\\"1\\\" [(ngModel)]=\\\"mouthVariation\\\" (change)=\\\"udpateSmileSlider($event)\\\"></mat-slider> -->\\n    </div>\\n    <div class=\\\"debug-info\\\">\\n      <label for=\\\"maxMouthHeigth\\\">Max Mouth Height {{maxMouthHeigth}} :</label>\\n      <input name=\\\"maxMouthHeigth\\\" type=\\\"number\\\" min=\\\"-20\\\" max=\\\"20\\\" [(ngModel)]=\\\"maxMouthHeigth\\\" (change)=\\\"udpateSmileSlider($event)\\\"/>\\n      <!-- <mat-slider min=\\\"0\\\" max=\\\"150\\\" step=\\\"1\\\" [(ngModel)]=\\\"maxMouthHeigth\\\" (change)=\\\"udpateSmileSlider($event)\\\"></mat-slider> -->\\n    </div>\\n    <div class=\\\"debug-info\\\">\\n      <label for=\\\"blinkRepeatSpeed\\\">Blink Speed {{blinkRepeatSpeed | number}} :</label>\\n      <input name=\\\"blinkRepeatSpeed\\\" type=\\\"number\\\" min=\\\"200\\\" max=\\\"5000\\\" [(ngModel)]=\\\"blinkRepeatSpeed\\\" (change)=\\\"udpateSmileSlider($event)\\\"/>\\n      <!-- <mat-slider min=\\\"200\\\" max=\\\"5000\\\" step=\\\"100\\\" [(ngModel)]=\\\"blinkRepeatSpeed\\\" (change)=\\\"udpateSmileSlider($event)\\\"></mat-slider> -->\\n    </div>\\n    <div class=\\\"debug-info\\\">\\n      <label for=\\\"thickness\\\">Thickness {{thickness}} :</label>\\n      <input name=\\\"thickness\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"15\\\" [(ngModel)]=\\\"thickness\\\" (change)=\\\"udpateSmileSlider($event)\\\"/>\\n      <!-- <mat-slider min=\\\"1\\\" max=\\\"15\\\" step=\\\"1\\\" [(ngModel)]=\\\"thickness\\\" (change)=\\\"udpateSmileSlider($event)\\\"></mat-slider> -->\\n    </div>\\n  </div>\\n</div>\\n\",\n                    styles: [\".all-container{display:inline-block;text-align:center}.all-container h2{text-align:center}.all-container .smile-container{margin:1rem}.all-container .controls{margin:auto;width:100%;text-align:center}.all-container .controls .debug-info label{padding-right:.5rem}\"]\n                }] }\n    ];\n    NgxSmileComponent.propDecorators = {\n        threshold: [{ type: Input }],\n        showDebug: [{ type: Input }],\n        size: [{ type: Input }],\n        faceColor: [{ type: Input }],\n        borderColor: [{ type: Input }],\n        thickness: [{ type: Input }],\n        mouthVariation: [{ type: Input }],\n        blinkRepeatSpeed: [{ type: Input }]\n    };\n    return NgxSmileComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxSmileModule = /** @class */ (function () {\n    function NgxSmileModule() {\n    }\n    NgxSmileModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [NgxSmileComponent],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                    ],\n                    exports: [NgxSmileComponent]\n                },] }\n    ];\n    return NgxSmileModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxSmileService, NgxSmileComponent, NgxSmileModule };\n\n//# sourceMappingURL=ngx-smile.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    {{ title }} Demo :)\\n  </h1>\\n</div>\\n<div class=\\\"main\\\">\\n  <div class=\\\"container\\\">\\n    <mat-card>\\n      <mat-card-header>\\n        <mat-card-title>Smile</mat-card-title>\\n        <mat-card-subtitle>Demo</mat-card-subtitle>\\n      </mat-card-header>\\n      <mat-card-content>\\n        <div class=\\\"u-text-center\\\">\\n          <ngx-smile threshold=\\\"-1\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"-0.5\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"0\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"0.5\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"1\\\"></ngx-smile>\\n        </div>\\n        <div class=\\\"u-text-center\\\">\\n          <ngx-smile threshold=\\\"1\\\" showDebug=\\\"true\\\"></ngx-smile>\\n        </div>\\n        <div class=\\\"u-text-center\\\">\\n          <ngx-smile threshold=\\\"0.75\\\" size=\\\"100\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"-0.75\\\" size=\\\"200\\\" faceColor=\\\"orange\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"0.3\\\" size=\\\"150\\\" faceColor=\\\"pink\\\" thickness=\\\"10\\\" borderColor=\\\"blue\\\" blinkRepeatSpeed=\\\"1000\\\"></ngx-smile>\\n          <ngx-smile threshold=\\\"0.8\\\" size=\\\"150\\\" faceColor=\\\"lightblue\\\" thickness=\\\"2\\\" borderColor=\\\"magenta\\\"\\n            blinkRepeatSpeed=\\\"500\\\" mouthVariation=\\\"-10\\\"></ngx-smile>\\n        </div>\\n      </mat-card-content>\\n      <mat-card-actions class=\\\"u-text-right\\\">\\n        <button mat-button></button>\\n      </mat-card-actions>\\n    </mat-card>\\n  </div>\\n</div>\\n\"","module.exports = \".u-text-center {\\n  text-align: center; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb21haW5mbGV1cnkvZGV2L25neC1zbWlsZS9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2FzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFrQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zYXNzIiwic291cmNlc0NvbnRlbnQiOlsiLnUtdGV4dC1jZW50ZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cbiJdfQ== */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sml-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  title = 'NgxSmile';\n}\n","import { NgxSmileModule } from 'ngx-smile';\n// import { NgxSmileModule } from 'projects/ngx-smile/src/public_api';\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule, MatCardModule } from '@angular/material';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    NgxSmileModule,\n    NoopAnimationsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}